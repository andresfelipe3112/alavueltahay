{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { useFocusEffect } from \"@react-navigation/native\";\nimport GlobalVars from \"../../global/globalVars\";\nimport StoreContext from \"../../helpers/globalStates\";\nimport recoveringStateLocation from \"../../utils/useGPS\";\nimport StatusBarComponent from \"../../components/atoms/StatusBar\";\nimport InputSearch from \"../../components/molecules/InputSearch\";\nimport Header from \"../../components/organisms/Header\";\nimport PanoramasGrid from \"../../components/organisms/PanoramasGrid\";\nimport ScrollView from \"../../components/templates/ScrollView\";\nimport WrappingViews from \"../../components/templates/WrappingViews\";\nimport Styles from \"./style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = Styles;\n\nvar PanoramasScreen = function PanoramasScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useContext = useContext(StoreContext.SecurityContext),\n      _jwt = _useContext._jwt;\n\n  var _useContext2 = useContext(StoreContext.UserContext),\n      user = _useContext2.user;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      ToRandomDispatch = _useState2[0],\n      setToRandomDispatch = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gps = _useState4[0],\n      setGps = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filterText = _useState6[0],\n      setFilterText = _useState6[1];\n\n  useEffect(function () {}, []);\n  useFocusEffect(useCallback(function () {\n    BackHandlerProcess();\n    getRandomNumberDispatch();\n    captureGps();\n  }, []));\n\n  var getRandomNumberDispatch = function getRandomNumberDispatch() {\n    var attrTemp = Math.random();\n    setToRandomDispatch(attrTemp);\n  };\n\n  var BackHandlerProcess = function BackHandlerProcess() {\n    var backAction = function backAction() {\n      navigation.goBack();\n      return true;\n    };\n\n    var backHandler = BackHandler.addEventListener(\"hardwareBackPress\", backAction);\n    return function () {\n      return backHandler.remove();\n    };\n  };\n\n  var captureGps = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _recover, _recover$coords, _recover2, _recover2$coords;\n\n      var recover = yield recoveringStateLocation();\n\n      while (recover === \"error\" || !recover) {\n        recover = yield recoveringStateLocation();\n      }\n\n      setGps({\n        latitude: (_recover = recover) == null ? void 0 : (_recover$coords = _recover.coords) == null ? void 0 : _recover$coords.latitude,\n        longitude: (_recover2 = recover) == null ? void 0 : (_recover2$coords = _recover2.coords) == null ? void 0 : _recover2$coords.longitude\n      });\n    });\n\n    return function captureGps() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return _jsxs(WrappingViews, {\n    children: [_jsx(StatusBarComponent, {}), _jsx(Header, {\n      navigation: navigation,\n      user: user,\n      _jwt: _jwt,\n      title: \"Panoramas\",\n      ToRandomDispatch: ToRandomDispatch,\n      isJustTitle: true\n    }), _jsx(View, {\n      style: styles.searchView,\n      children: _jsx(InputSearch, {\n        label: \"Buscar panoramas\",\n        iconName: filterText ? \"x\" : \"search\",\n        textvariable: filterText || \"\",\n        setValue: function setValue(val) {\n          return setFilterText(val);\n        },\n        bgBlue: true\n      })\n    }), _jsx(ScrollView, {\n      style: styles.scrolling,\n      contentContainerStyle: styles.wrapScrollView,\n      colorScrollBar: GlobalVars.orange,\n      children: _jsx(View, {\n        style: {\n          width: \"100%\"\n        },\n        children: _jsx(PanoramasGrid, {\n          jwt: _jwt,\n          filterText: filterText,\n          gps: gps,\n          title: \"Todos los resultados\",\n          showTitle: true,\n          activeNears: true\n        })\n      })\n    })]\n  });\n};\n\nexport default PanoramasScreen;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useContext","useFocusEffect","GlobalVars","StoreContext","recoveringStateLocation","StatusBarComponent","InputSearch","Header","PanoramasGrid","ScrollView","WrappingViews","Styles","styles","PanoramasScreen","navigation","route","SecurityContext","_jwt","UserContext","user","ToRandomDispatch","setToRandomDispatch","gps","setGps","filterText","setFilterText","BackHandlerProcess","getRandomNumberDispatch","captureGps","attrTemp","Math","random","backAction","goBack","backHandler","BackHandler","addEventListener","remove","recover","latitude","coords","longitude","searchView","val","scrolling","wrapScrollView","orange","width"],"sources":["/Users/andresfelipepinillameneses/Documents/John 2/front/src/screens/Panoramas/index.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useContext } from \"react\";\n\nimport { View, BackHandler } from \"react-native\";\n\nimport { useFocusEffect } from \"@react-navigation/native\";\n\nimport GlobalVars from \"../../global/globalVars\";\n\nimport StoreContext from \"../../helpers/globalStates\";\n\nimport recoveringStateLocation from \"../../utils/useGPS\";\n\n/** Import Componentes Custom */\nimport StatusBarComponent from \"../../components/atoms/StatusBar\";\nimport InputSearch from \"../../components/molecules/InputSearch\";\nimport Header from \"../../components/organisms/Header\";\nimport PanoramasGrid from \"../../components/organisms/PanoramasGrid\";\nimport ScrollView from \"../../components/templates/ScrollView\";\nimport WrappingViews from \"../../components/templates/WrappingViews\";\n\n/** Styles */\nimport Styles from \"./style\";\n\nconst styles = Styles;\nconst PanoramasScreen = ({ navigation, route }) => {\n  const { _jwt } = useContext(StoreContext.SecurityContext);\n  const { user } = useContext(StoreContext.UserContext);\n\n  const [ToRandomDispatch, setToRandomDispatch] = useState(null);\n\n  const [gps, setGps] = useState(null);\n  const [filterText, setFilterText] = useState(\"\");\n\n  useEffect(() => {}, []);\n\n  useFocusEffect(\n    useCallback(() => {\n      /** Backhandler process Android -> back button */\n      BackHandlerProcess();\n\n      getRandomNumberDispatch();\n\n      captureGps();\n    }, [])\n  );\n\n  const getRandomNumberDispatch = () => {\n    // random vals process for generate token for wish\n    const attrTemp = Math.random();\n    setToRandomDispatch(attrTemp);\n  };\n\n  const BackHandlerProcess = () => {\n    /** Android no return Login */\n    const backAction = () => {\n      navigation.goBack();\n      return true;\n    };\n    const backHandler = BackHandler.addEventListener(\n      \"hardwareBackPress\",\n      backAction\n    );\n    return () => backHandler.remove();\n  };\n\n  const captureGps = async () => {\n    let recover = await recoveringStateLocation();\n    while (recover === \"error\" || !recover) {\n      recover = await recoveringStateLocation();\n    }\n    setGps({\n      latitude: recover?.coords?.latitude,\n      longitude: recover?.coords?.longitude,\n    });\n  };\n\n  return (\n    <WrappingViews>\n      <StatusBarComponent />\n      <Header\n        navigation={navigation}\n        user={user}\n        _jwt={_jwt}\n        title=\"Panoramas\"\n        ToRandomDispatch={ToRandomDispatch}\n        isJustTitle\n      />\n\n      <View style={styles.searchView}>\n        <InputSearch\n          label=\"Buscar panoramas\"\n          iconName={filterText ? \"x\" : \"search\"}\n          textvariable={filterText || \"\"}\n          setValue={(val) => setFilterText(val)}\n          bgBlue\n        />\n      </View>\n\n      <ScrollView\n        style={styles.scrolling}\n        contentContainerStyle={styles.wrapScrollView}\n        colorScrollBar={GlobalVars.orange}\n      >\n        <View style={{ width: \"100%\" }}>\n          <PanoramasGrid\n            jwt={_jwt}\n            filterText={filterText}\n            gps={gps}\n            title=\"Todos los resultados\"\n            showTitle\n            activeNears\n          />\n        </View>\n      </ScrollView>\n    </WrappingViews>\n  );\n};\n\nexport default PanoramasScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}