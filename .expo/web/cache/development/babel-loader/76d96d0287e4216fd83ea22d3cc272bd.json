{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = Appearance.getColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState = useState(initialColorMode),\n      _useState2 = _slicedToArray(_useState, 2),\n      colorMode = _useState2[0],\n      setRawMode = _useState2[1];\n\n  var setColorMode = React.useCallback(function () {\n    var _ref = _asyncToGenerator(function* (val) {\n      if (colorModeManager) {\n        yield colorModeManager.set(val);\n      }\n\n      setRawMode(val);\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator(function* () {\n          var value = yield colorModeManager.get(initialColorMode);\n\n          if (value && value !== colorMode) {\n            setRawMode(value);\n          }\n        });\n\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"sources":["hooks.tsx"],"names":["useColorMode","colorMode","colorModeContext","React","systemColorMode","Appearance","initialColorMode","useState","setColorMode","colorModeManager","setRawMode","useEffect","value","toggleAccessibleColors"],"mappings":";;AAAA,OAAA,KAAA,IAAA,QAAA,EAAA,SAAA,QAAA,OAAA;AAMA,SAAA,aAAA;;AAIA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAA8B;EACxD,wBAIIG,KAAK,CAALA,UAAAA,CAJJ,aAIIA,CAJJ;EAAA,IACaD,gBADb,qBACED,SADF;;EAKA,IAAIC,gBAAgB,KAApB,SAAA,EAAoC;IAClC,MAAM,IAAA,KAAA,CAAN,uDAAM,CAAN;EACD;;EACD,OAAA,gBAAA;AATK,CAAA;AAYP,OAAO,SAAA,iBAAA,CAAA,KAAA,EAAA,IAAA,EAAkD;EACvD,oBAAsBF,YAAtB,EAAA;EAAA,IAAQC,SAAR,iBAAQA,SAAR;;EACA,OAAOA,SAAS,KAATA,MAAAA,GAAAA,IAAAA,GAAP,KAAA;AACD;AAED,OAAO,SAAA,cAAA,CAAA,gBAAA,EAAA,kBAAA,EAAA,gBAAA,EAIL;EACA,IAAMG,eAAe,GAAGC,UAAU,CAAlC,cAAwBA,EAAxB;;EAEA,IAAA,kBAAA,EAAwB;IACtBC,gBAAgB,GAAhBA,eAAAA;EACD;;EAED,gBAAgCC,QAAQ,CAAxC,gBAAwC,CAAxC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,UAAN;;EACA,IAAMC,YAAY,GAAG,KAAK,CAAL,WAAA;IAAA,6BACnB,WAAA,GAAA,EAA0B;MACxB,IAAA,gBAAA,EAAsB;QACpB,MAAMC,gBAAgB,CAAhBA,GAAAA,CAAN,GAAMA,CAAN;MACD;;MACDC,UAAU,CAAVA,GAAU,CAAVA;IALiB,CAAA;;IAAA;MAAA;IAAA;EAAA,KAOnB,CAfF,gBAeE,CAPmB,CAArB;EAWAC,SAAS,CAAC,YAAM;IACd,IAAA,gBAAA,EAAsB;MACpB;QAAA,iCAAC,aAAyB;UACxB,IAAIC,KAAK,SAASH,gBAAgB,CAAhBA,GAAAA,CAAlB,gBAAkBA,CAAlB;;UACA,IAAIG,KAAK,IAAIA,KAAK,KAAlB,SAAA,EAAkC;YAChCF,UAAU,CAAVA,KAAU,CAAVA;UACD;QAJH,CAAA;;QAAA,SAAC,OAAD;UAAA;QAAA;;QAAA,OAAC,OAAD;MAAA;IAMD;EARM,CAAA,EASN,CAAA,SAAA,EAAA,gBAAA,EA5BH,gBA4BG,CATM,CAATC;EAYAA,SAAS,CAAC,YAAM;IACd,IAAI,CAAA,gBAAA,IAAJ,kBAAA,EAA6C;MAC3CD,UAAU,CAAVA,eAAU,CAAVA;IACD;EAHM,CAAA,EAIN,CAAA,eAAA,EAAA,gBAAA,EAAA,kBAAA,EAJHC,UAIG,CAJM,CAATA;EAMA,OAAO;IAAEV,SAAF,EAAEA,SAAF;IAAaO,YAAAA,EAAAA;EAAb,CAAP;AACD;AAED,OAAO,SAAA,mBAAA,GAIL;EACA,yBAIIL,KAAK,CAALA,UAAAA,CAJJ,aAIIA,CAJJ;EAAA,IACaD,gBADb,sBACED,SADF;;EAKA,IAAMY,sBAAsB,GAAG,SAAzBA,sBAAyB;IAAA,OAC7BX,gBAAgB,CAAhBA,mBAAAA,CAAqC,CAACA,gBAAgB,CADxD,gBACEA,CAD6B;EAAA,CAA/B;;EAEA,OAAO,CACLA,gBAAgB,CADX,gBAAA,EAELA,gBAAgB,CAFX,mBAAA,EAAP,sBAAO,CAAP;AAKD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { Appearance } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = Appearance.getColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}