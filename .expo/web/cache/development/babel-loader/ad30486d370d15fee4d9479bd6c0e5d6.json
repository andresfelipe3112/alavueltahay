{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nexport function useClipboard() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasCopied = _React$useState2[0],\n      setHasCopied = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setValue = _React$useState4[1];\n\n  var onCopy = function () {\n    var _ref = _asyncToGenerator(function* (copiedValue) {\n      if (Clipboard) {\n        yield Clipboard.setString(copiedValue);\n      }\n\n      setValue(copiedValue);\n      setHasCopied(true);\n    });\n\n    return function onCopy(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}","map":{"version":3,"sources":["useClipboard.ts"],"names":["React","onCopy","Clipboard","setValue","setHasCopied","value","hasCopied"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,OAAO,SAAA,YAAA,GAAwB;EAC7B,sBAAkCA,KAAK,CAALA,QAAAA,CAAlC,KAAkCA,CAAlC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EACA,uBAA0BA,KAAK,CAALA,QAAAA,CAA1B,EAA0BA,CAA1B;EAAA;EAAA,IAAM,KAAN;EAAA,IAAM,QAAN;;EACA,IAAMC,MAAM;IAAA,6BAAG,WAAA,WAAA,EAA+B;MAC5C,IAAA,SAAA,EAAe;QACb,MAAMC,SAAS,CAATA,SAAAA,CAAN,WAAMA,CAAN;MACD;;MACDC,QAAQ,CAARA,WAAQ,CAARA;MACAC,YAAY,CAAZA,IAAY,CAAZA;IALF,CAAY;;IAAA,gBAANH,MAAM;MAAA;IAAA;EAAA,GAAZ;;EAOA,OAAO;IACLI,KADK,EACLA,KADK;IAELJ,MAFK,EAELA,MAFK;IAGLK,SAAAA,EAAAA;EAHK,CAAP;AAKD","sourcesContent":["import React from 'react';\nimport { Clipboard } from 'react-native';\n\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState<string>('');\n  const onCopy = async (copiedValue: string) => {\n    if (Clipboard) {\n      await Clipboard.setString(copiedValue);\n    }\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n  return {\n    value,\n    onCopy,\n    hasCopied,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}