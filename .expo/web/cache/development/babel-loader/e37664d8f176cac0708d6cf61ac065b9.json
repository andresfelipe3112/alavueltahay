{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isUserUpdate\", \"_jwt\", \"user\"];\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport GlobalVars from \"../../../global/globalVars\";\nimport { GET_AVATARES } from \"../../../mock/avatares\";\nimport updateDataUser from \"../../../helpers/updateDataUser\";\nimport LabelTextComponent from \"../../atoms/LabelText\";\nimport ButtonComponent from \"../../atoms/ButtonComponent\";\nimport ImageUriComponent from \"../../atoms/ImageUriComponent\";\nimport ScrollView from \"../../templates/ScrollView\";\nimport Styles from \"./style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = Styles;\n\nvar PickerAvatar = function PickerAvatar(_ref) {\n  var _ref$isUserUpdate = _ref.isUserUpdate,\n      isUserUpdate = _ref$isUserUpdate === void 0 ? false : _ref$isUserUpdate,\n      _ref$_jwt = _ref._jwt,\n      _jwt = _ref$_jwt === void 0 ? null : _ref$_jwt,\n      _ref$user = _ref.user,\n      user = _ref$user === void 0 ? null : _ref$user,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var onClose = props.onClose,\n      avatarSelected = props.avatarSelected,\n      setAvatarSelected = props.setAvatarSelected;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      errMsg = _useState2[0],\n      setErrMsg = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showErr = _useState4[0],\n      setShowErr = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      avatares = _useState8[0],\n      setAvatares = _useState8[1];\n\n  useEffect(function () {\n    onRecoverAvatars();\n  }, []);\n\n  var onRecoverAvatars = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var res = yield GET_AVATARES();\n      setAvatares(res);\n    });\n\n    return function onRecoverAvatars() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var saveAvatar = function () {\n    var _ref3 = _asyncToGenerator(function* (param) {\n      yield setLoading(true);\n\n      try {\n        switch (param) {\n          case 1:\n            var dataSend = {\n              id: user == null ? void 0 : user.id,\n              avatar: avatarSelected\n            };\n            var res = yield updateDataUser.userAvatar(dataSend, _jwt);\n\n            if (res) {\n              setLoading(false);\n              onClose();\n            } else {\n              setLoading(false);\n              setErrMsg(\"No se puedo actualizar su avatar.\");\n              setShowErr(true);\n              setTimeout(function () {\n                setShowErr(false);\n              }, 1200);\n            }\n\n            break;\n        }\n      } catch (e) {\n        setLoading(false);\n        setErrMsg(\"No se puedo actualizar su avatar.\");\n        setShowErr(true);\n        setTimeout(function () {\n          setShowErr(false);\n        }, 1200);\n      }\n    });\n\n    return function saveAvatar(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var optionAvatares = avatares.length && avatares.map(function (avatar) {\n    var _avatar$attributes;\n\n    return _jsx(TouchableOpacity, {\n      style: [styles.avatarView, {\n        borderWidth: avatarSelected === (avatar == null ? void 0 : avatar.id) ? 1 : 0,\n        borderColor: GlobalVars.blueOpaque,\n        paddingVertical: avatarSelected === (avatar == null ? void 0 : avatar.id) ? 5 : 0\n      }],\n      onPress: function onPress() {\n        return setAvatarSelected(avatar == null ? void 0 : avatar.id);\n      },\n      children: _jsx(ImageUriComponent, {\n        width: avatarSelected ? \"90%\" : \"100%\",\n        height: avatarSelected === (avatar == null ? void 0 : avatar.id) ? 40 : 50,\n        img: {\n          uri: avatar == null ? void 0 : (_avatar$attributes = avatar.attributes) == null ? void 0 : _avatar$attributes.uriAvatar\n        },\n        mode: \"contain\",\n        borderTopRadius: 25,\n        borderBottomRadius: 25\n      })\n    }, \"avatar_\" + (avatar == null ? void 0 : avatar.id));\n  }) || _jsx(_Fragment, {});\n\n  return _jsxs(View, {\n    style: styles.view,\n    children: [loading && _jsx(ActivityIndicator, {\n      color: GlobalVars.orange,\n      size: \"large\"\n    }), !loading && _jsxs(_Fragment, {\n      children: [_jsx(LabelTextComponent, {\n        text: \"Selecciona tu avatar\",\n        color: GlobalVars.blueOpaque,\n        size: 15\n      }), showErr && _jsx(LabelTextComponent, {\n        text: errMsg,\n        color: GlobalVars.googleColor,\n        size: 10\n      }), _jsx(View, {\n        style: styles.containerScroll,\n        children: _jsx(ScrollView, {\n          style: styles.scrolling,\n          contentContainerStyle: styles.wrapScrollView,\n          colorScrollBar: GlobalVars.orange,\n          children: _jsx(View, {\n            style: styles.gridCats,\n            children: optionAvatares\n          })\n        })\n      }), showErr && errMsg && _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setShowErr(false);\n        },\n        children: _jsx(LabelTextComponent, {\n          text: errMsg,\n          color: GlobalVars.googleColor,\n          size: 13\n        })\n      }), avatarSelected && _jsx(ButtonComponent, {\n        text: \"Guardar\",\n        color: GlobalVars.orange,\n        textColor: GlobalVars.white,\n        Action: function Action() {\n          return isUserUpdate ? saveAvatar(1) : null;\n        }\n      }), _jsx(TouchableOpacity, {\n        style: styles.closeIcon,\n        onPress: onClose,\n        children: _jsx(Entypo, {\n          name: \"circle-with-cross\",\n          size: 24,\n          color: GlobalVars.blueOpaque\n        })\n      })]\n    })]\n  });\n};\n\nexport default PickerAvatar;","map":{"version":3,"names":["React","useState","useEffect","Entypo","GlobalVars","GET_AVATARES","updateDataUser","LabelTextComponent","ButtonComponent","ImageUriComponent","ScrollView","Styles","styles","PickerAvatar","isUserUpdate","_jwt","user","props","onClose","avatarSelected","setAvatarSelected","errMsg","setErrMsg","showErr","setShowErr","loading","setLoading","avatares","setAvatares","onRecoverAvatars","res","saveAvatar","param","dataSend","id","avatar","userAvatar","setTimeout","e","optionAvatares","length","map","avatarView","borderWidth","borderColor","blueOpaque","paddingVertical","uri","attributes","uriAvatar","view","orange","googleColor","containerScroll","scrolling","wrapScrollView","gridCats","white","closeIcon"],"sources":["/Users/andresfelipepinillameneses/Documents/John 2/front/src/components/organisms/ChooseAvatar/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { View, TouchableOpacity, ActivityIndicator } from \"react-native\";\n\nimport { Entypo } from \"@expo/vector-icons\";\n\nimport GlobalVars from \"../../../global/globalVars\";\n\nimport { GET_AVATARES } from \"../../../mock/avatares\";\n\nimport updateDataUser from \"../../../helpers/updateDataUser\";\n\nimport LabelTextComponent from \"../../atoms/LabelText\";\nimport ButtonComponent from \"../../atoms/ButtonComponent\";\nimport ImageUriComponent from \"../../atoms/ImageUriComponent\";\nimport ScrollView from \"../../templates/ScrollView\";\n\nimport Styles from \"./style\";\n\nconst styles = Styles;\n\nconst PickerAvatar = ({\n  isUserUpdate = false,\n  _jwt = null,\n  user = null,\n  ...props\n}) => {\n  const { onClose, avatarSelected, setAvatarSelected } = props;\n\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [showErr, setShowErr] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [avatares, setAvatares] = useState([]);\n\n  useEffect(() => {\n    // Data in CMS\n    onRecoverAvatars();\n  }, []);\n\n  const onRecoverAvatars = async () => {\n    const res = await GET_AVATARES();\n    setAvatares(res);\n  };\n\n  const saveAvatar = async (param) => {\n    await setLoading(true);\n    try {\n      switch (param) {\n        case 1:\n          const dataSend = {\n            id: user?.id,\n            avatar: avatarSelected,\n          };\n          const res = await updateDataUser.userAvatar(dataSend, _jwt);\n          if (res) {\n            setLoading(false);\n            onClose();\n          } else {\n            setLoading(false);\n            setErrMsg(\"No se puedo actualizar su avatar.\");\n            setShowErr(true);\n            setTimeout(() => {\n              setShowErr(false);\n            }, 1200);\n          }\n\n          break;\n      }\n    } catch (e) {\n      setLoading(false);\n      setErrMsg(\"No se puedo actualizar su avatar.\");\n      setShowErr(true);\n      setTimeout(() => {\n        setShowErr(false);\n      }, 1200);\n    }\n  };\n\n  const optionAvatares = (avatares.length &&\n    avatares.map((avatar) => {\n      return (\n        <TouchableOpacity\n          key={\"avatar_\" + avatar?.id}\n          style={[\n            styles.avatarView,\n            {\n              borderWidth: avatarSelected === avatar?.id ? 1 : 0,\n              borderColor: GlobalVars.blueOpaque,\n              paddingVertical: avatarSelected === avatar?.id ? 5 : 0,\n            },\n          ]}\n          onPress={() => setAvatarSelected(avatar?.id)}\n        >\n          <ImageUriComponent\n            width={avatarSelected ? \"90%\" : \"100%\"}\n            height={avatarSelected === avatar?.id ? 40 : 50}\n            img={{ uri: avatar?.attributes?.uriAvatar }}\n            mode=\"contain\"\n            borderTopRadius={25}\n            borderBottomRadius={25}\n          />\n        </TouchableOpacity>\n      );\n    })) || <></>;\n\n  return (\n    <View style={styles.view}>\n      {loading && <ActivityIndicator color={GlobalVars.orange} size=\"large\" />}\n      {!loading && (\n        <>\n          <LabelTextComponent\n            text=\"Selecciona tu avatar\"\n            color={GlobalVars.blueOpaque}\n            size={15}\n          />\n\n          {showErr && (\n            <LabelTextComponent\n              text={errMsg}\n              color={GlobalVars.googleColor}\n              size={10}\n            />\n          )}\n          <View style={styles.containerScroll}>\n            <ScrollView\n              style={styles.scrolling}\n              contentContainerStyle={styles.wrapScrollView}\n              colorScrollBar={GlobalVars.orange}\n            >\n              <View style={styles.gridCats}>{optionAvatares}</View>\n            </ScrollView>\n          </View>\n\n          {showErr && errMsg && (\n            <TouchableOpacity onPress={() => setShowErr(false)}>\n              <LabelTextComponent\n                text={errMsg}\n                color={GlobalVars.googleColor}\n                size={13}\n              />\n            </TouchableOpacity>\n          )}\n\n          {avatarSelected && (\n            <ButtonComponent\n              text=\"Guardar\"\n              color={GlobalVars.orange}\n              textColor={GlobalVars.white}\n              Action={() => (isUserUpdate ? saveAvatar(1) : null)}\n            />\n          )}\n\n          <TouchableOpacity style={styles.closeIcon} onPress={onClose}>\n            <Entypo\n              name=\"circle-with-cross\"\n              size={24}\n              color={GlobalVars.blueOpaque}\n            />\n          </TouchableOpacity>\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default PickerAvatar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}