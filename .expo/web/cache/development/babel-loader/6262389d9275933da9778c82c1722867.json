{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"colorScrollBar\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport GlobalVars from \"../../../global/globalVars\";\nimport Styles from \"./style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = Styles;\nexport default function SBScrollView(_ref) {\n  var _ref$colorScrollBar = _ref.colorScrollBar,\n      colorScrollBar = _ref$colorScrollBar === void 0 ? null : _ref$colorScrollBar,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      nativeEvent = _useState2[0],\n      setNativeEvent = _useState2[1];\n\n  var top = nativeEvent ? nativeEvent.contentOffset.y + nativeEvent.contentOffset.y / nativeEvent.contentSize.height * nativeEvent.layoutMeasurement.height : 0;\n  return _jsxs(ScrollView, _objectSpread(_objectSpread({\n    scrollEventThrottle: 5,\n    persistentScrollbar: false,\n    showsVerticalScrollIndicator: false,\n    onScroll: function onScroll(event) {\n      return setNativeEvent(event.nativeEvent);\n    }\n  }, props), {}, {\n    children: [children, _jsx(View, {\n      style: [styles.viewScrollBar, {\n        top: top,\n        backgroundColor: colorScrollBar ? colorScrollBar : GlobalVars.white\n      }]\n    })]\n  }));\n}","map":{"version":3,"names":["React","useState","GlobalVars","Styles","styles","SBScrollView","colorScrollBar","children","props","nativeEvent","setNativeEvent","top","contentOffset","y","contentSize","height","layoutMeasurement","event","viewScrollBar","backgroundColor","white"],"sources":["/Users/andresfelipepinillameneses/Documents/John 2/front/src/components/templates/ScrollView/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, ScrollView } from \"react-native\";\n\nimport GlobalVars from \"../../../global/globalVars\";\n\nimport Styles from \"./style\";\n\n// type Props = {|\n//   persistentScrollbar?: boolean,\n//   children?: React$Node,\n// |} & View.propTypes;\n\nconst styles = Styles;\n\nexport default function SBScrollView({\n  colorScrollBar = null,\n  children,\n  ...props\n}) {\n  const [nativeEvent, setNativeEvent] = useState();\n\n  // if (Platform.OS === \"android\") {\n  //   // Android supports the persistentScrollbar\n  //   return (\n  //     <ScrollView persistentScrollbar={true} indicatorStyle=\"white\" {...props}>\n  //       {children}\n  //     </ScrollView>\n  //   );\n  // }\n\n  const top = nativeEvent\n    ? nativeEvent.contentOffset.y +\n      (nativeEvent.contentOffset.y / nativeEvent.contentSize.height) *\n        nativeEvent.layoutMeasurement.height\n    : 0;\n\n  return (\n    <ScrollView\n      scrollEventThrottle={5}\n      persistentScrollbar={false}\n      showsVerticalScrollIndicator={false}\n      onScroll={(event) => setNativeEvent(event.nativeEvent)}\n      {...props}\n    >\n      {children}\n\n      <View\n        style={[\n          styles.viewScrollBar,\n          {\n            top,\n            backgroundColor: colorScrollBar ? colorScrollBar : GlobalVars.white,\n          },\n        ]}\n      />\n    </ScrollView>\n  );\n}\n"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,OAAOC,UAAP;AAEA,OAAOC,MAAP;;;AAOA,IAAMC,MAAM,GAAGD,MAAf;AAEA,eAAe,SAASE,YAAT,OAIZ;EAAA,+BAHDC,cAGC;EAAA,IAHDA,cAGC,oCAHgB,IAGhB;EAAA,IAFDC,QAEC,QAFDA,QAEC;EAAA,IADEC,KACF;;EACD,gBAAsCP,QAAQ,EAA9C;EAAA;EAAA,IAAOQ,WAAP;EAAA,IAAoBC,cAApB;;EAWA,IAAMC,GAAG,GAAGF,WAAW,GACnBA,WAAW,CAACG,aAAZ,CAA0BC,CAA1B,GACCJ,WAAW,CAACG,aAAZ,CAA0BC,CAA1B,GAA8BJ,WAAW,CAACK,WAAZ,CAAwBC,MAAvD,GACEN,WAAW,CAACO,iBAAZ,CAA8BD,MAHb,GAInB,CAJJ;EAMA,OACE,MAAC,UAAD;IACE,mBAAmB,EAAE,CADvB;IAEE,mBAAmB,EAAE,KAFvB;IAGE,4BAA4B,EAAE,KAHhC;IAIE,QAAQ,EAAE,kBAACE,KAAD;MAAA,OAAWP,cAAc,CAACO,KAAK,CAACR,WAAP,CAAzB;IAAA;EAJZ,GAKMD,KALN;IAAA,WAOGD,QAPH,EASE,KAAC,IAAD;MACE,KAAK,EAAE,CACLH,MAAM,CAACc,aADF,EAEL;QACEP,GAAG,EAAHA,GADF;QAEEQ,eAAe,EAAEb,cAAc,GAAGA,cAAH,GAAoBJ,UAAU,CAACkB;MAFhE,CAFK;IADT,EATF;EAAA,GADF;AAqBD"},"metadata":{},"sourceType":"module"}